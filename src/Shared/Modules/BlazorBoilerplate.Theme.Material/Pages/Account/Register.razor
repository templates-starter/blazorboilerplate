@page "/account/register"

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Strings> L
@inject IMatToaster matToaster

<MatCard>
    <div class="logo">
        <img src="_content/BlazorBoilerplate.Theme.Material/images/logo.svg" style="width:100px;" /><br />BlazorBoilerplate
        <br />
        <h4>@L["Registration"]</h4>
    </div>
    <EditForm Model="@registerParameters" OnValidSubmit="@RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.UserName" Label=@L["UserName"] Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.Email" Label=@L["Email"] Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.Password" Label=@L["Password"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.PasswordConfirm" Label=@L["Password Confirmation"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MatButton Type="submit" Raised="true">@L["Register"]</MatButton>
            </div>
            <hr />
            <NavLink href="account/login">
                <h6 class="font-weight-normal text-center">@L["AlreadyRegistered"]</h6>
            </NavLink>
        </fieldset>
    </EditForm>
</MatCard>

@code {
    RegisterDto registerParameters { get; set; } = new RegisterDto();

    async Task RegisterUser()
    {
        try
        {
            var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Register(registerParameters);
            if (response.IsSuccessStatusCode)
            {
                matToaster.Add("New User Email Verification was sent to: " + registerParameters.Email, MatToastType.Success, L["UserCreationSuccessful"]);
                navigationManager.NavigateTo("");
            }
            else
            {
                matToaster.Add(response.Message, MatToastType.Danger, L["UserCreationFailed"]);
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["UserCreationFailed"]);
        }
    }
}
