@page "/account/login"

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject IStringLocalizer<Strings> L

<AuthorizeView Context="AuthorizeContext">
    <Authorized>
        <LoadingBackground ShowLogoBox="true">
            <label>@L["Loading"]</label>
        </LoadingBackground>
    </Authorized>
    <NotAuthorized>
        @if (loginViewModel.EnableLocalLogin)
        {<MatCard>
                <div class="hidden-mdc-down">
                    <MatIconButton Icon="exit_to_app" Class="float-left" @onclick="GoBack" />
                    <MatIconButton Icon="home" Class="float-left" Link="/" />
                </div>
                <div class="logo">
                    <a href="/" title="@appState.AppName Home"><img src="_content/BlazorBoilerplate.Theme.Material/images/logo.svg" style="width:100px;" title="@appState.AppName Home" alt="@appState.AppName" /><br />@appState.AppName</a>
                    <br />
                    <h4>@L["Log in"]</h4>
                    User  -> Username: <b>user</b>  Password: <b>user123</b><br />
                    Admin -> Username: <b>admin</b> Password: <b>admin123</b><br />
                </div>
                <EditForm Model="@loginViewModel" OnValidSubmit="@SubmitLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <fieldset>
                        <div class="form-group">
                            <MatTextField id="userName" @bind-Value="@loginViewModel.UserName" Label=@L["UserName"] Icon="person" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
                        </div>
                        <div class="form-group">
                            <MatTextField @bind-Value="@loginViewModel.Password" Label=@L["Password"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password" tabindex="2"></MatTextField>
                        </div>
                        <div class="form-group">
                            <MatButton class="float-right" Type="submit" Raised="true" tabindex="3">@L["Login"]</MatButton>
                            @if (loginViewModel.AllowRememberLogin)
                            {<MatCheckbox @bind-Value="@loginViewModel.RememberMe" class="filled-in chk-col-blue">@L["Keep me logged in"]</MatCheckbox>}
                        </div>
                    </fieldset>
                </EditForm>
                <hr />
                <div>
                    <MatButton class="float-left" OnClick="@Register" Raised="true">@L["Sign up"]</MatButton>
                </div>
            </MatCard>
            <MatAccordion>
                <MatExpansionPanel @bind-Expanded="@forgotPasswordToggle">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@L["Forgot your password?"]</MatExpansionPanelHeader>
                        <MatExpansionPanelSubHeader></MatExpansionPanelSubHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <EditForm Model="@forgotPasswordParameters" OnValidSubmit="@ForgotPassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group">
                                <MatTextField @bind-Value="@forgotPasswordParameters.Email" Label=@L["Email"] Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                            </div>
                            <div class="form-group">
                                <MatButton class="float-right" Type="submit" Raised="true">@L["Submit"]</MatButton>
                            </div>
                        </EditForm>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>}
        @if (loginViewModel.VisibleExternalProviders.Any())
        {
            <br />
            <MatCard>
                @if (!loginViewModel.EnableLocalLogin)
                {<div class="hidden-mdc-down">
                        <MatIconButton Icon="exit_to_app" Class="float-left" @onclick="GoBack" />
                        <MatIconButton Icon="home" Class="float-left" Link="/" />
                    </div>}
                <div class="logo">
                    @if (!loginViewModel.EnableLocalLogin)
                    {<a href="/" title="@appState.AppName Home"><img src="_content/BlazorBoilerplate.Theme.Material/images/logo.svg" style="width:100px;" title="@appState.AppName Home" alt="@appState.AppName" /><br />@appState.AppName</a>
                    <br />}
                    <h4>@L["Sign in with"]</h4>
                </div>
                <div style="text-align: center">
                    @foreach (var provider in loginViewModel.VisibleExternalProviders)
                    {
                        @switch (provider.AuthenticationScheme)
                        {
                            case "Google":
                            case "Facebook":
                                <div class="form-group">
                                    <MatButton Style="min-width: 140px;" OnClick="@(() => SignInWith(provider))" Raised="true"><img height="18" src="/images/@(provider.AuthenticationScheme.ToLower()).svg" /></MatButton>
                                </div>
                                break;
                            case "Twitter":
                            case "Microsoft":
                            case "Apple":
                                <div class="form-group">
                                    <MatButton Style="min-width: 140px;" OnClick="@(() => SignInWith(provider))" Raised="true"><img height="18" src="/images/@(provider.AuthenticationScheme.ToLower()).svg" />&nbsp;@provider.DisplayName</MatButton>
                                </div>
                                break;
                            default:
                                <div class="form-group">
                                    <MatButton Style="min-width: 140px;" OnClick="@(() => SignInWith(provider))" Raised="true" Label="@provider.DisplayName" />
                                </div>
                                break;
                        }
                    }
                </div>
            </MatCard>}
        @if (!loginViewModel.EnableLocalLogin && !loginViewModel.VisibleExternalProviders.Any())
        {
            <div class="alert alert-warning">
                <strong>Invalid login request</strong>
                There are no login schemes configured for this client.
            </div>
        }
    </NotAuthorized>
</AuthorizeView>
@code {

    string navigateTo = null;
    IdentityAuthenticationStateProvider identityAuthenticationStateProvider;
    bool forgotPasswordToggle = false;
    bool RedirectInProgress = false;
    LoginViewModel loginViewModel { get; set; } = new LoginViewModel();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();

    string ReturnUrl;

    protected override async Task OnInitializedAsync()
    {
        if (navigationManager.TryGetQueryString<string>("ReturnUrl", out string url))
            ReturnUrl = url;

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
            RedirectInProgress = true;
        else
        {
            identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

            var apiResponse = await identityAuthenticationStateProvider.BuildLoginViewModel(ReturnUrl);

            if (apiResponse.IsSuccessStatusCode)
            {
                loginViewModel = apiResponse.Result;
                if (loginViewModel.IsExternalLoginOnly)
                {
                    // we only have one option for logging in and it's an external provider
                    navigationManager.NavigateTo($"{navigationManager.BaseUri}api/externalauth/challenge/{loginViewModel.ExternalLoginScheme}/{ReturnUrl}", true);
                }
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["LoginFailed"]);
        }
    }

    private void GoBack()
    {
        if (string.IsNullOrEmpty(ReturnUrl))
            ReturnUrl = string.Empty;

        NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
    }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

//-:cnd:noEmit
#if ClientSideBlazor
    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated && navigateTo != null)
            navigationManager.NavigateTo(navigateTo);
    }
#endif
//-:cnd:noEmit
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !RedirectInProgress)
            await js.InvokeVoidAsync("interop.SetFocus", "userName");

        await base.OnAfterRenderAsync(firstRender);
    }

    void SignInWith(ExternalProvider provider)
    {
        navigationManager.NavigateTo($"{navigationManager.BaseUri}api/externalauth/challenge/{provider.AuthenticationScheme}/{ReturnUrl}", true);
    }

    void Register()
    {
        navigationManager.NavigateTo("/account/register");
    }

    async Task SubmitLogin()
    {
        try
        {
            loginViewModel.ReturnUrl = ReturnUrl;
            var response = await identityAuthenticationStateProvider.Login(loginViewModel);

            if (response.IsSuccessStatusCode)
            {
                // On successful Login the response.Message is the Last Page Visited from User Profile
                // We can't navigate yet as the setup is proceeding asynchronously
                if (string.IsNullOrEmpty(ReturnUrl))
                    navigateTo = navigationManager.BaseUri + (!string.IsNullOrEmpty(response.Message) ? response.Message : "/dashboard");
                else
                    navigateTo = ReturnUrl;

            }
            else
                matToaster.Add(response.Message, MatToastType.Danger, L["LoginFailed"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["LoginFailed"]);
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await identityAuthenticationStateProvider.ForgotPassword(forgotPasswordParameters);
            matToaster.Add(L["ForgotPasswordEmailSent"], MatToastType.Success);
            forgotPasswordParameters.Email = string.Empty;
            forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["ResetPasswordFailed"]);
        }
    }
}
